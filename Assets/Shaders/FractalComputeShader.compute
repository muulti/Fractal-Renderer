#pragma kernel CSMain

RWTexture2D<float4> Result;

static const float E = 2.718281828459045;
static const float PI = 3.14159265359; // 10 decimal places for good precision
// Parameters for the Mandelbrot set
float2 resolution; // Screen resolution
float2 offset;     // Offset in the complex plane
float zoom;        // Zoom level
int maxIterations; // Maximum iterations
float escapeRadius; // Escape radius (limit)
float aspectRatio;
float2 secondTerm;

// Compute the next value in the sequence
float2 MandelbrotComputeNext(float2 current, float2 c);
float2 JuliaComputeNext(float2 current, float2 c) ;
// Detect divergence
int MandelbrotRender(float2 c, int maxIt, float lim);
int JuliaRender(float2 coords, int maxIt, float lim);

int RedditGuyRender(float2 coords, int maxIt, float lim);
float2 RedditGuyComputeNext(float2 z, float2 c);


[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) 
{
    if (id.x >= resolution.x || id.y >= resolution.y || resolution.y == 0) return;

    // Normalize pixel coordinates to [0, 1]
    float2 uv = (float2(id.xy) / resolution - 0.5f) * 2.0;

    // Apply aspect ratio correction
    uv.x *= aspectRatio;

    // Apply zoom and offset to map to the complex plane
    float2 pixelID = uv / zoom + offset;

    // Calculate iterations using the fractal rendering function
    int iterations = MandelbrotRender(pixelID, maxIterations, escapeRadius);

    // Normalize iterations for coloring
    float t = (float)iterations / maxIterations;

    // Apply color gradient
    float3 color = float3(t, t, t); // Greyscale gradient

    // Write the color to the output texture
    Result[id.xy] = float4(color, 1.0);
}

float2 ComputeNext(float2 z, float2 c)
// Z=Z^2+C   wher both C and Z are complex in the form of Z=a+b*i
//To compute Z
//Where Z=a+bi & C=j+ki
//Develop formula --> Z=a^2-b^2+2abi+j+ki
//Real side Zr=a^2-b^2+j
//Complex side Zc=2abi+ki
{
    //Real side Zr=a^2-b^2+j
    float real = z.x * z.x - z.y * z.y + c.x;
    //Complex side Zc=2abi+ki
    float imag = 2.0 * z.x * z.y + c.y;
    return float2(real, imag);
}



// Detect divergence
int MandelbrotRender(float2 coords, int maxIt, float lim)
//In Mandelbrot fractal, Z is always (0,0) for each pixel at the start
//C changes depending on the pixel
{
    float2 zn = float2(0,0); // Start at Z0 = 0
    int i = 0;
    while (i < maxIt && dot(zn, zn) < lim * lim) 
    {
        zn = ComputeNext(zn, coords); // Mandelbrot iteration
        i++;
    }
    return i;
}

// Detect divergence
int JuliaRender(float2 coords, int maxIt, float lim)
//In Julia fracta, Z changes depending on the pixel, and C remains fixed
//Changing C results in modifying Julia´s anatomy (technically should at least)
{
    //c: -1,3 + 0,00525·i
    float2 zn = coords; // Start at Z0 = 0
    int i = 0;
    while (i < maxIt && dot(zn, zn) < lim * lim) 
    {
        zn = ComputeNext(zn, secondTerm);
        i++;
    }
    return i;
}

float2 RedditGuyComputeNext(float2 c1, float2 c2)
{
    // Handle edge case where c1 is (0, 0)
    if (abs(c1.x) < 1e-6 && abs(c1.y) < 1e-6) 
    {
        return float2(0.0, 0.0);
    }

    // Convert to polar form
    float r = sqrt(c1.x * c1.x + c1.y * c1.y);  // Magnitude
    if (r < 1e-6) r = 1e-6; // Avoid log(0) or division by zero
    float a = (abs(c1.x) < 1e-6) ? PI / 2.0 : atan(c1.y / c1.x);  // Angle (atan2 equivalent)

    // Compute power in polar coordinates
    float c = pow(r, c2.x) / pow(E, c2.y * a);
    float d = c2.y * log(r) + c2.x * a;

    // Convert back to Cartesian form
    return float2(c * cos(d), c * sin(d));
}

// Mandelbrot-style fractal render (mandelbrot equivalent)
int RedditGuyRender(float2 coords, int maxIt, float lim)
{
    float2 zn = coords; // Start at Z0 matching the pixel coordinates
    int i = 0;

    while (i < maxIt && dot(zn, zn) < 100*100) 
    {
        zn = RedditGuyComputeNext(float2(0.0, 1.0), zn); // i^z
        zn += coords; // Add constant C
        i++;
    }

    return i;
}